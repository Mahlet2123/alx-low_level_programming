#include "hash_tables.h"

/**
 * hash_table_create- creates a hash table.
 *
 * Return: a pointer to the newly created hash table
 * If something went wrong, returns NULL
 */

hash_table_t *hash_table_create(unsigned long int size)
{
	if (!size)
		return NULL;
	hash_table_t * new_hash_table = malloc(sizeof(hash_table_t));
	if (new_hash_table == NULL)
		return NULL;
	new_hash_table->size = size;
	new_hash_table->array = malloc(sizeof(hash_node_t*) * size);
	if (new_hash_table->array == NULL)
	{
		free(new_hash_table);
		return NULL;
	}

	return new_hash_table;
}

hash_node_t *new_item(char *key, char *value)
{
	hash_node_t *new_item = malloc (sizeof(hash_node_t));
	if (new_item == NULL)
		return NULL;
	new_item->key = key;
	new_item->value = value;
	new_item->next = NULL;

	return new_item;
}
void free_item(hash_node_t *item)
{
	if (item != NULL)
		free(item);
}
